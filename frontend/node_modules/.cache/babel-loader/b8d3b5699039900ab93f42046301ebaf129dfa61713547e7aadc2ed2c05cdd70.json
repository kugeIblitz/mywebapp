{"ast":null,"code":"var _jsxFileName = \"/home/rayen/Desktop/HomeWork/mywebapp/frontend/src/components/Expenses/ExpensesChart.js\";\nimport React from 'react';\nimport Chart from '../Chart/Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpensesChart = props => {\n  const chartDataPoints = [{\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Feb',\n    value: 0\n  }, {\n    label: 'Mar',\n    value: 0\n  }, {\n    label: 'Apr',\n    value: 0\n  }, {\n    label: 'May',\n    value: 0\n  }, {\n    label: 'Jun',\n    value: 0\n  }, {\n    label: 'Jul',\n    value: 0\n  }, {\n    label: 'Aug',\n    value: 0\n  }, {\n    label: 'Sep',\n    value: 0\n  }, {\n    label: 'Oct',\n    value: 0\n  }, {\n    label: 'Nov',\n    value: 0\n  }, {\n    label: 'Dec',\n    value: 0\n  }];\n  for (const expense of props.expenses) {\n    const expenseDate = new Date(expense.date);\n\n    // Check if expenseDate is a valid Date object\n    if (Object.prototype.toString.call(expenseDate) === \"[object Date]\" && !isNaN(expenseDate) && typeof expenseDate.getMonth === 'function') {\n      const expenseMonth = expenseDate.getMonth();\n      chartDataPoints[expenseMonth].value += expense.amount;\n    } else {\n      // Handle the case where expense.date is not a valid Date object\n      console.error(`Invalid date for expense: ${JSON.stringify(expense)}`);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    dataPoints: chartDataPoints\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n};\n_c = ExpensesChart;\nexport default ExpensesChart;\nvar _c;\n$RefreshReg$(_c, \"ExpensesChart\");","map":{"version":3,"names":["React","Chart","jsxDEV","_jsxDEV","ExpensesChart","props","chartDataPoints","label","value","expense","expenses","expenseDate","Date","date","Object","prototype","toString","call","isNaN","getMonth","expenseMonth","amount","console","error","JSON","stringify","dataPoints","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rayen/Desktop/HomeWork/mywebapp/frontend/src/components/Expenses/ExpensesChart.js"],"sourcesContent":["import React from 'react';\r\nimport Chart from '../Chart/Chart';\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    { label: 'Jan', value: 0 },\r\n    { label: 'Feb', value: 0 },\r\n    { label: 'Mar', value: 0 },\r\n    { label: 'Apr', value: 0 },\r\n    { label: 'May', value: 0 },\r\n    { label: 'Jun', value: 0 },\r\n    { label: 'Jul', value: 0 },\r\n    { label: 'Aug', value: 0 },\r\n    { label: 'Sep', value: 0 },\r\n    { label: 'Oct', value: 0 },\r\n    { label: 'Nov', value: 0 },\r\n    { label: 'Dec', value: 0 },\r\n  ];\r\n\r\n  for (const expense of props.expenses) {\r\n    const expenseDate = new Date(expense.date);\r\n\r\n    // Check if expenseDate is a valid Date object\r\n    if (\r\n      Object.prototype.toString.call(expenseDate) === \"[object Date]\" &&\r\n      !isNaN(expenseDate) &&\r\n      typeof expenseDate.getMonth === 'function'\r\n    ) {\r\n      const expenseMonth = expenseDate.getMonth();\r\n      chartDataPoints[expenseMonth].value += expense.amount;\r\n    } else {\r\n      // Handle the case where expense.date is not a valid Date object\r\n      console.error(`Invalid date for expense: ${JSON.stringify(expense)}`);\r\n    }\r\n  }\r\n\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/B,MAAMC,eAAe,GAAG,CACtB;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,EAC1B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAE,CAAC,CAC3B;EAED,KAAK,MAAMC,OAAO,IAAIJ,KAAK,CAACK,QAAQ,EAAE;IACpC,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC;;IAE1C;IACA,IACEC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,WAAW,CAAC,KAAK,eAAe,IAC/D,CAACO,KAAK,CAACP,WAAW,CAAC,IACnB,OAAOA,WAAW,CAACQ,QAAQ,KAAK,UAAU,EAC1C;MACA,MAAMC,YAAY,GAAGT,WAAW,CAACQ,QAAQ,CAAC,CAAC;MAC3Cb,eAAe,CAACc,YAAY,CAAC,CAACZ,KAAK,IAAIC,OAAO,CAACY,MAAM;IACvD,CAAC,MAAM;MACL;MACAC,OAAO,CAACC,KAAK,CAAE,6BAA4BC,IAAI,CAACC,SAAS,CAAChB,OAAO,CAAE,EAAC,CAAC;IACvE;EACF;EAEA,oBAAON,OAAA,CAACF,KAAK;IAACyB,UAAU,EAAEpB;EAAgB;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/C,CAAC;AAACC,EAAA,GAlCI3B,aAAa;AAoCnB,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}